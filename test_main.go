package main

import "testing"

func TestCalc(t *testing.T) {
	// Тесты для корректных выражений
	testCases := []struct {
		expression string
		expected   float64
	}{
		{"(1 + 2) * 3 / 4", 2.25},
		{"(5 + 3 * 2) / (4 - 1) * 7", 28},
		{"10 / (2 + 3) * 6 - 4 / 2", 8},
		{"((1 + 2) * (3 - 4)) / 5", -0.6},
		{"(5 * (3 + 2)) / (4 + 1)", 5},
		{"((2 + 3) * (4 - 1)) / (5 + 1)", 2.5},
		{"(5 * (3 + 2)) / (4 + 1) * 2 + (1 + 2)", 13},
		{"(1 + 2) * (3 + 4) / (5 + 6) - (7 + 8) / (9 + 10)", -1.4545454545454546},
		{"((1 + 2) * (3 + 4)) / (5 + 6) - (7 + 8) / (9 + 10) * 11", -16.909090909090908},
		{"(1 + 2) * (3 + 4) / (5 + 6) + (7 + 8) / (9 + 10) * 11", 12.545454545454545},
		{"((1 + 2) * (3 + 4)) / (5 + 6) + (7 + 8) / (9 + 10) * 11 + (12 + 13) / (14 + 15)", 14.363636363636363},
		{"(1 + 2) * (3 + 4) / (5 + 6) + (7 + 8) / (9 + 10) * 11 - (12 + 13) / (14 + 15)", 12.181818181818182},
		{"((1 + 2) * (3 + 4)) / (5 + 6) - (7 + 8) / (9 + 10) * 11 + (12 + 13) / (14 + 15)", -15.545454545454543},
		{"(1 + 2) * (3 + 4) / (5 + 6) - (7 + 8) / (9 + 10) * 11 - (12 + 13) / (14 + 15)", -17.727272727272725},
		{"((1 + 2) * (3 + 4)) / (5 + 6) - (7 + 8) / (9 + 10) * 11 + (12 + 13) / (14 + 15) * 16", -3.5454545454545457},
		{"(1 + 2) * (3 + 4) / (5 + 6) - (7 + 8) / (9 + 10) * 11 - (12 + 13) / (14 + 15) * 16", -29.90909090909091},
		{"((1 + 2) * (3 + 4)) / (5 + 6) + (7 + 8) / (9 + 10) * 11 - (12 + 13) / (14 + 15) * 16", 1.9090909090909092},
		{"(1 + 2) * (3 + 4) / (5 + 6) + (7 + 8) / (9 + 10) * 11 + (12 + 13) / (14 + 15) * 16", 25.727272727272727},
		{"((1 + 2) * (3 + 4)) / (5 + 6) - (7 + 8) / (9 + 10) * 11 + (12 + 13) / (14 + 15) * 16 - (17 + 18) / (19 + 20)", -9.545454545454543},
		{"(1 + 2) * (3 + 4) / (5 + 6) - (7 + 8) / (9 + 10) * 11 - (12 + 13) / (14 + 15) * 16 + (17 + 18) / (19 + 20)", -36.10909090909091},
		{"((1 + 2) * (3 + 4)) / (5 + 6) + (7 + 8) / (9 + 10) * 11 - (12 + 13) / (14 + 15) * 16 + (17 + 18) / (19 + 20) * 21", 12.045454545454547},
		{"(1 + 2) * (3 + 4) / (5 + 6) + (7 + 8) / (9 + 10) * 11 + (12 + 13) / (14 + 15) * 16 + (17 + 18) / (19 + 20) * 21", 41.86363636363636},
		{"((1 + 2) * (3 + 4)) / (5 + 6) - (7 + 8) / (9 + 10) * 11 + (12 + 13) / (14 + 15) * 16 - (17 + 18) / (19 + 20) * 21", -23.545454545454543},
		{"(1 + 2) * (3 + 4) / (5 + 6) - (7 + 8) / (9 + 10) * 11 - (12 + 13) / (14 + 15) * 16 + (17 + 18) / (19 + 20) * 21", -40.70909090909091}, {"((1 + 2) * (3 + 4)) / (5 + 6) + (7 + 8) / (9 + 10) * 11 - (12 + 13) / (14 + 15) * 16 + (17 + 18) / (19 + 20) * 21 - (22 + 23) / (24 + 25)", -1.4545454545454546},
		{"(1 + 2) * (3 + 4) / (5 + 6) + (7 + 8) / (9 + 10) * 11 + (12 + 13) / (14 + 15) * 16 + (17 + 18) / (19 + 20) * 21 - (22 + 23) / (24 + 25)", 40.40909090909091},
		{"((1 + 2) * (3 + 4)) / (5 + 6) - (7 + 8) / (9 + 10) * 11 + (12 + 13) / (14 + 15) * 16 - (17 + 18) / (19 + 20) * 21 + (22 + 23) / (24 + 25) * 26", -1.272727272727273},
		{"(1 + 2) * (3 + 4) / (5 + 6) - (7 + 8) / (9 + 10) * 11 - (12 + 13) / (14 + 15) * 16 + (17 + 18) / (19 + 20) * 21 + (22 + 23) / (24 + 25) * 26", -38.00909090909091},
		{"((1 + 2) * (3 + 4)) / (5 + 6) + (7 + 8) / (9 + 10) * 11 - (12 + 13) / (14 + 15) * 16 + (17 + 18) / (19 + 20) * 21 - (22 + 23) / (24 + 25) * 26", 9.727272727272727},
		{"(1 + 2) * (3 + 4) / (5 + 6) + (7 + 8) / (9 + 10) * 11 + (12 + 13) / (14 + 15) * 16 + (17 + 18) / (19 + 20) * 21 + (22 + 23) / (24 + 25) * 26", 59.54545454545455},
		{"((1 + 2) * (3 + 4)) / (5 + 6) - (7 + 8) / (9 + 10) * 11 + (12 + 13) / (14 + 15) * 16 - (17 + 18) / (19 + 20) * 21 + (22 + 23) / (24 + 25) * 26 - (27 + 28) / (29 + 30)", -9.045454545454543},
		{"(1 + 2) * (3 + 4) / (5 + 6) - (7 + 8) / (9 + 10) * 11 - (12 + 13) / (14 + 15) * 16 + (17 + 18) / (19 + 20) * 21 + (22 + 23) / (24 + 25) * 26 - (27 + 28) / (29 + 30)", -45.30909090909091},
		{"((1 + 2) * (3 + 4)) / (5 + 6) + (7 + 8) / (9 + 10) * 11 - (12 + 13) / (14 + 15) * 16 + (17 + 18) / (19 + 20) * 21 - (22 + 23) / (24 + 25) * 26 + (27 + 28) / (29 + 30) * 31", 10.454545454545453},
		{"(1 + 2) * (3 + 4) / (5 + 6) + (7 + 8) / (9 + 10) * 11 + (12 + 13) / (14 + 15) * 16 + (17 + 18) / (19 + 20) * 21 + (22 + 23) / (24 + 25) * 26 + (27 + 28) / (29 + 30) * 31", 78.27272727272727},
	}

	for _, testCase := range testCases {
		t.Run(testCase.expression, func(t *testing.T) {
			result, err := Calc(testCase.expression)
			if err != nil {
				t.Errorf("Calc(%s) error: %v", testCase.expression, err)
			} else if result != testCase.expected {
				t.Errorf("Calc(%s) = %v, want %v", testCase.expression, result, testCase.expected)
			}
		})
	}
}
